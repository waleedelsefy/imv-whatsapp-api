<?php
/**
 * Plugin Name:       IMV WhatsApp API
 * Plugin URI:        https://imvagency.net/
 * Description:       A custom WordPress plugin to integrate WooCommerce with WhatsApp, providing custom API endpoints, order status notifications, and an advanced customer wallet system.
 * Version:           3.5
 * Author:            waleed elsefy
 * Author URI:        https://imvagency.net/
 * License:           GPL v2 or later
 * License URI:       https://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain:       imv-api
 * Domain Path:       /languages
 */

// Security Check: Exit if accessed directly.
if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

// Define plugin constants.
if ( ! defined( 'IMV_API_PLUGIN_DIR' ) ) {
    define( 'IMV_API_PLUGIN_DIR', plugin_dir_path( __FILE__ ) );
}
if ( ! defined( 'IMV_API_PLUGIN_URL' ) ) {
    define( 'IMV_API_PLUGIN_URL', plugin_dir_url( __FILE__ ) );
}

/**
 * Composer Autoloader.
 * This file is generated by Composer and handles the automatic loading of classes
 * based on their namespaces. It's crucial for the new file structure.
 * Make sure to run `composer install` in the plugin directory.
 */
if ( file_exists( IMV_API_PLUGIN_DIR . 'vendor/autoload.php' ) ) {
    require_once IMV_API_PLUGIN_DIR . 'vendor/autoload.php';
} else {
    // Fallback or error message if autoloader is not found.
    add_action( 'admin_notices', function() {
        echo '<div class="error"><p>';
        echo esc_html__( 'IMV WhatsApp API Error: The Composer autoloader is missing. Please run `composer install` in the plugin directory.', 'imv-api' );
        echo '</p></div>';
    });
    return;
}


// Import necessary classes using their full namespaces.
// This allows us to refer to them simply by their class name later (e.g., Core instead of Imv\WhatsAppApi\Core).
use Imv\WhatsAppApi\Activator;
use Imv\WhatsAppApi\Deactivator;
use Imv\WhatsAppApi\Loader;
use Imv\WhatsAppApi\Core;
use Imv\WhatsAppApi\Wallet;
use Imv\WhatsAppApi\Admin;

/**
 * Register activation and deactivation hooks.
 * These methods are called when the plugin is activated or deactivated.
 */
register_activation_hook( __FILE__, array( Activator::class, 'activate' ) );
register_deactivation_hook( __FILE__, array( Deactivator::class, 'deactivate' ) );

/**
 * Begins execution of the plugin.
 *
 * This function instantiates the main loader and registers all plugin hooks
 * (actions and filters) with WordPress.
 */
function run_imv_whatsapp_api() {
    // Instantiate the Loader class to manage all hooks.
    $loader = new Loader();

    // Register core plugin functionalities.
    $core = new Core();
    $loader->add_action( 'plugins_loaded', $core, 'load_textdomain' );
    $loader->add_action( 'rest_api_init', $core, 'register_api_endpoints' );
    $loader->add_action( 'init', $core, 'register_pending_assessment_order_status' );
    $loader->add_filter( 'wc_order_statuses', $core, 'add_pending_assessment_to_order_statuses' );
    $loader->add_action( 'woocommerce_order_status_changed', $core, 'send_direct_whatsapp_notification', 10, 4 );

    // Register wallet functionalities.
    $wallet = new Wallet();
    $loader->add_action( 'user_register', $wallet, 'initialize_customer_wallet' );
    $loader->add_action( 'woocommerce_created_customer', $wallet, 'initialize_customer_wallet_on_api_create', 10, 1 );
    $loader->add_action( 'show_user_profile', $wallet, 'add_wallet_fields_to_user_profile' );
    $loader->add_action( 'edit_user_profile', $wallet, 'add_wallet_fields_to_user_profile' );
    $loader->add_action( 'personal_options_update', $wallet, 'save_wallet_fields_from_user_profile' );
    $loader->add_action( 'edit_user_profile_update', $wallet, 'save_wallet_fields_from_user_profile' );
    $loader->add_action( 'woocommerce_order_status_changed', $wallet, 'deduct_from_pending_on_order_completion', 15, 4 );

    // Register admin settings functionalities.
    $admin = new Admin();
    $loader->add_action( 'admin_menu', $admin, 'add_admin_menu' );
    $loader->add_action( 'admin_init', $admin, 'settings_init' );

    // Run the loader to execute all registered hooks.
    $loader->run();
}
run_imv_whatsapp_api();
